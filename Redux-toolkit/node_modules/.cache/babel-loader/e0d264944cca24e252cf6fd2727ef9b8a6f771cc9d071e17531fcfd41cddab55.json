{"ast":null,"code":"// ==> api call from the redux\n// \t- redux used to handle only synchronous behaviour and don't know how to deal withe the asynchronous behaviour\n// \t- to handle asynchronous behaviour we need to use middleware in redux \n// \t- to use the middleware we use the popular redux middleware thunk middleware (in redux-toolkit it's already there)\n//  - to call the api we need a separate slice beacuse it should not effect add and remove action in cartSlice\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n//to handle api data we need to create initialstate as an object \nconst initialState = {\n  data: [] //data which hold the api data\n};\n\n//create slice for api call\n// slice don't know how to handle asynchronous data\nconst productSlice = createSlice({\n  name: 'product',\n  initialState,\n  reducers: {\n    fetchProducts(state, action) {\n      state.data = action.payload;\n    }\n  } //reduces to handle the asynchronous task\n});\n\nexport const {\n  fetchProducts\n} = productSlice.actions; //return the action\nexport default productSlice.reducer; //return the reducer\n\n//to handle asynchronous data we need to create thunk action creator \nexport function getProducts() {\n  return async function getProductThunk(dispatch, getState) {\n    const data = await fetch('https://fakestoreapi.com/products');\n    const result = await data.json();\n    // dispatch the data \n    dispatch(fetchProducts(result));\n  };\n}","map":{"version":3,"names":["createSlice","initialState","data","productSlice","name","reducers","fetchProducts","state","action","payload","actions","reducer","getProducts","getProductThunk","dispatch","getState","fetch","result","json"],"sources":["C:/Users/Syndell025/OneDrive/Desktop/Mansi/demo-app/Aarmor task/src/store/ProductSlice.js"],"sourcesContent":["// ==> api call from the redux\r\n// \t- redux used to handle only synchronous behaviour and don't know how to deal withe the asynchronous behaviour\r\n// \t- to handle asynchronous behaviour we need to use middleware in redux \r\n// \t- to use the middleware we use the popular redux middleware thunk middleware (in redux-toolkit it's already there)\r\n//  - to call the api we need a separate slice beacuse it should not effect add and remove action in cartSlice\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n//to handle api data we need to create initialstate as an object \r\nconst initialState  = {\r\n    data: [],  //data which hold the api data\r\n\r\n};\r\n\r\n//create slice for api call\r\n// slice don't know how to handle asynchronous data\r\nconst productSlice = createSlice({\r\n    name : 'product',\r\n    initialState,\r\n    reducers: {\r\n        fetchProducts(state, action){\r\n            state.data = action.payload;\r\n        }        \r\n    }, //reduces to handle the asynchronous task\r\n\r\n})\r\n\r\nexport const {fetchProducts} = productSlice.actions; //return the action\r\nexport default productSlice.reducer;  //return the reducer\r\n\r\n//to handle asynchronous data we need to create thunk action creator \r\nexport function  getProducts(){\r\n    return async function getProductThunk(dispatch, getState) {\r\n        const data = await fetch('https://fakestoreapi.com/products')\r\n        const result = await data.json() \r\n        // dispatch the data \r\n        dispatch(fetchProducts(result))\r\n        \r\n    }\r\n\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAI;EAClBC,IAAI,EAAE,EAAE,CAAG;AAEf,CAAC;;AAED;AACA;AACA,MAAMC,YAAY,GAAGH,WAAW,CAAC;EAC7BI,IAAI,EAAG,SAAS;EAChBH,YAAY;EACZI,QAAQ,EAAE;IACNC,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAC;MACxBD,KAAK,CAACL,IAAI,GAAGM,MAAM,CAACC,OAAO;IAC/B;EACJ,CAAC,CAAE;AAEP,CAAC,CAAC;;AAEF,OAAO,MAAM;EAACH;AAAa,CAAC,GAAGH,YAAY,CAACO,OAAO,CAAC,CAAC;AACrD,eAAeP,YAAY,CAACQ,OAAO,CAAC,CAAE;;AAEtC;AACA,OAAO,SAAUC,WAAWA,CAAA,EAAE;EAC1B,OAAO,eAAeC,eAAeA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACtD,MAAMb,IAAI,GAAG,MAAMc,KAAK,CAAC,mCAAmC,CAAC;IAC7D,MAAMC,MAAM,GAAG,MAAMf,IAAI,CAACgB,IAAI,CAAC,CAAC;IAChC;IACAJ,QAAQ,CAACR,aAAa,CAACW,MAAM,CAAC,CAAC;EAEnC,CAAC;AAEL"},"metadata":{},"sourceType":"module","externalDependencies":[]}