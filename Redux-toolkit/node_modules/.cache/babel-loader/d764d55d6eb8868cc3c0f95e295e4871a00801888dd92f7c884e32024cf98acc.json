{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [];\n\n//create slice per feature \nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    add(state, action) {\n      // state.push(action.payload)\n      const {\n        id\n      } = action.payload;\n      const existingItem = state.find(item => item.id === id);\n      if (existingItem) {\n        existingItem.quantity += 1;\n      } else {\n        state.push({\n          ...action.payload,\n          quantity: 1\n        });\n      }\n    },\n    remove(state, action) {\n      // return state.filter(item => item.id !== action.payload) //only remove the sleceted item based on it's id \n      const idToRemove = action.payload;\n      return state.filter(item => item.id !== idToRemove);\n    },\n    reduceQt(state, action) {}\n  }\n});\nexport const {\n  add,\n  remove\n} = cartSlice.actions; //return the action\nexport default cartSlice.reducer; //return the reducer","map":{"version":3,"names":["createSlice","initialState","cartSlice","name","reducers","add","state","action","id","payload","existingItem","find","item","quantity","push","remove","idToRemove","filter","reduceQt","actions","reducer"],"sources":["C:/Users/Syndell025/OneDrive/Desktop/Mansi/demo-app/Aarmor task/src/store/CartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [];\r\n\r\n//create slice per feature \r\nconst cartSlice = createSlice({\r\n    name : 'cart',\r\n    initialState,\r\n    reducers: {\r\n        add(state, action) {\r\n            // state.push(action.payload)\r\n            const { id } = action.payload;\r\n            const existingItem = state.find(item => item.id === id);\r\n\r\n            if (existingItem) {\r\n                existingItem.quantity += 1;\r\n            } else {\r\n                state.push({ ...action.payload, quantity: 1 });\r\n            }\r\n        },\r\n        remove(state, action) {\r\n            // return state.filter(item => item.id !== action.payload) //only remove the sleceted item based on it's id \r\n            const idToRemove = action.payload;\r\n            return state.filter(item => item.id !== idToRemove);\r\n        },\r\n        reduceQt(state,action){\r\n            \r\n        }\r\n    }\r\n})\r\n\r\nexport const {add, remove} = cartSlice.actions; //return the action\r\nexport default cartSlice.reducer;  //return the reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG,EAAE;;AAEvB;AACA,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAG,MAAM;EACbF,YAAY;EACZG,QAAQ,EAAE;IACNC,GAAGA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACf;MACA,MAAM;QAAEC;MAAG,CAAC,GAAGD,MAAM,CAACE,OAAO;MAC7B,MAAMC,YAAY,GAAGJ,KAAK,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC;MAEvD,IAAIE,YAAY,EAAE;QACdA,YAAY,CAACG,QAAQ,IAAI,CAAC;MAC9B,CAAC,MAAM;QACHP,KAAK,CAACQ,IAAI,CAAC;UAAE,GAAGP,MAAM,CAACE,OAAO;UAAEI,QAAQ,EAAE;QAAE,CAAC,CAAC;MAClD;IACJ,CAAC;IACDE,MAAMA,CAACT,KAAK,EAAEC,MAAM,EAAE;MAClB;MACA,MAAMS,UAAU,GAAGT,MAAM,CAACE,OAAO;MACjC,OAAOH,KAAK,CAACW,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKQ,UAAU,CAAC;IACvD,CAAC;IACDE,QAAQA,CAACZ,KAAK,EAACC,MAAM,EAAC,CAEtB;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACF,GAAG;EAAEU;AAAM,CAAC,GAAGb,SAAS,CAACiB,OAAO,CAAC,CAAC;AAChD,eAAejB,SAAS,CAACkB,OAAO,CAAC,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}