{"ast":null,"code":"// ==> api call from the redux\n// \t- redux used to handle only synchronous behaviour and don't know how to deal withe the asynchronous behaviour\n// \t- to handle asynchronous behaviour we need to use middleware in redux \n// \t- to use the middleware we use the popular redux middleware thunk middleware (in redux-toolkit it's already there)\n//  - to call the api we need a separate slice beacuse it should not effect add and remove action in cartSlice\n\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n//to handle api data we need to create initialstate as an object \nconst initialState = {\n  data: [] //data which hold the api data\n};\n\n//create slice for api call\n// slice don't know how to handle asynchronous data\nconst productSlice = createSlice({\n  name: 'product',\n  initialState,\n  reducers: {\n    // fetchProducts(state, action){\n    //     state.data = action.payload;\n    // }        \n  },\n  //reduces to handle the synchronous task\n  extraReducers: builder => {} //to handle  asynchronous task\n});\n\nexport const {\n  fetchProducts\n} = productSlice.actions; //return the action\nexport default productSlice.reducer; //return the reducer\n\n//create async thunk middleware\nexport const getProducts = createAsyncThunk('product/get', async () => {\n  const data = await fetch('https://fakestoreapi.com/products');\n  const result = await data.json();\n});\n\n//to handle asynchronous data we need to create thunk action creator \n// export function  getProducts(){\n//     return async function getProductThunk(dispatch, getState) {\n//         const data = await fetch('https://fakestoreapi.com/products')\n//         const result = await data.json() \n//         // dispatch the data \n//         dispatch(fetchProducts(result))        \n//     }\n// }","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","data","productSlice","name","reducers","extraReducers","builder","fetchProducts","actions","reducer","getProducts","fetch","result","json"],"sources":["C:/Users/Syndell025/OneDrive/Desktop/Mansi/demo-app/Aarmor task/src/store/ProductSlice.js"],"sourcesContent":["// ==> api call from the redux\r\n// \t- redux used to handle only synchronous behaviour and don't know how to deal withe the asynchronous behaviour\r\n// \t- to handle asynchronous behaviour we need to use middleware in redux \r\n// \t- to use the middleware we use the popular redux middleware thunk middleware (in redux-toolkit it's already there)\r\n//  - to call the api we need a separate slice beacuse it should not effect add and remove action in cartSlice\r\n\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n//to handle api data we need to create initialstate as an object \r\nconst initialState  = {\r\n    data: [],  //data which hold the api data\r\n\r\n};\r\n\r\n//create slice for api call\r\n// slice don't know how to handle asynchronous data\r\nconst productSlice = createSlice({\r\n    name : 'product',\r\n    initialState,\r\n    reducers: {\r\n        // fetchProducts(state, action){\r\n        //     state.data = action.payload;\r\n        // }        \r\n    }, //reduces to handle the synchronous task\r\n    extraReducers: (builder) => {\r\n\r\n\r\n    } //to handle  asynchronous task\r\n\r\n})\r\n\r\nexport const {fetchProducts} = productSlice.actions; //return the action\r\nexport default productSlice.reducer;  //return the reducer\r\n\r\n//create async thunk middleware\r\nexport const getProducts = createAsyncThunk('product/get', async () => {\r\n    const data = await fetch('https://fakestoreapi.com/products')\r\n    const result = await data.json() \r\n}) \r\n\r\n//to handle asynchronous data we need to create thunk action creator \r\n// export function  getProducts(){\r\n//     return async function getProductThunk(dispatch, getState) {\r\n//         const data = await fetch('https://fakestoreapi.com/products')\r\n//         const result = await data.json() \r\n//         // dispatch the data \r\n//         dispatch(fetchProducts(result))        \r\n//     }\r\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;;AAEhE;AACA,MAAMC,YAAY,GAAI;EAClBC,IAAI,EAAE,EAAE,CAAG;AAEf,CAAC;;AAED;AACA;AACA,MAAMC,YAAY,GAAGH,WAAW,CAAC;EAC7BI,IAAI,EAAG,SAAS;EAChBH,YAAY;EACZI,QAAQ,EAAE;IACN;IACA;IACA;EAAA,CACH;EAAE;EACHC,aAAa,EAAGC,OAAO,IAAK,CAG5B,CAAC,CAAC;AAEN,CAAC,CAAC;;AAEF,OAAO,MAAM;EAACC;AAAa,CAAC,GAAGL,YAAY,CAACM,OAAO,CAAC,CAAC;AACrD,eAAeN,YAAY,CAACO,OAAO,CAAC,CAAE;;AAEtC;AACA,OAAO,MAAMC,WAAW,GAAGZ,gBAAgB,CAAC,aAAa,EAAE,YAAY;EACnE,MAAMG,IAAI,GAAG,MAAMU,KAAK,CAAC,mCAAmC,CAAC;EAC7D,MAAMC,MAAM,GAAG,MAAMX,IAAI,CAACY,IAAI,CAAC,CAAC;AACpC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}